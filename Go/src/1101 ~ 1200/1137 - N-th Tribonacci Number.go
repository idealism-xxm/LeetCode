// 链接：https://leetcode.com/problems/n-th-tribonacci-number/
// 题意：求泰波那契数列的第 n 个数？
//
//      泰波那契数列 T(n) 定义如下：
//          1. T(0) = T(1) = T(2) = 1
//          2. T(n) = F(n - 1) + F(n - 2) + F(n - 3), n > 2


// 数据限制：
//  0 <= n <= 37
//  结果不超过 2 ^ 31 - 1


// 输入： n = 4
// 输出： 4
// 解释： T(3) = T(2) + T(1) + T(0) = 1 + 1 + 0 = 2
//       T(3) = T(3) + T(2) + T(1) = 2 + 1 + 1 = 4

// 输入： n = 25
// 输出： 1389537


// 思路： DP
//
//      本题是 LeetCode 509 的加强版，状态转移方程涉及的数从两个变为三个，
//      思路不变，代码稍作修改即可通过。
//
//      题目已经将 DP 的状态定义和转移方程给出，直接按照题意初始化和计算即可。
//
//
//      DP 常见的三种优化方式见 LeetCode 583 这题的思路，
//      本题只能采用滚动数组的方式进行优化，将空间复杂度从 O(n) 优化为 O(1) 。
//      本实现为了便于理解，不做优化处理。
//
//
//      时间复杂度：O(n)
//          1. 需要遍历计算全部 O(n) 个状态
//      空间复杂度：O(n)
//          1. 需要维护 dp 中全部 O(n) 个状态


func tribonacci(n int) int {
    // 特判初始状态，防止后续初始化 dp[1] = dp[2] = 1 越界
    if n == 0 {
        return 0
    }
    if n <= 2 {
        return 1
    }

    // 定义状态，初始化 dp[0] = 0, dp[1] = dp[2] = 1
    dp := make([]int, n + 1)
    dp[1], dp[2] = 1, 1
    // 从 dp[3] 开始进行状态转移
    for i := 3; i <=n ; i++ {
        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]
    }

    return dp[n]
}
