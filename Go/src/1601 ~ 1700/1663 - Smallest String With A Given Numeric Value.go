// 链接：https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/
// 题意：给定两个整数 n 和 k ，返回长度为 n 且数值为 k 的字典序最小的字符串。
//
//      字符串均有英文小写字母组成，
//      字符串的数值是其所含所有字符的数值之和，
//      字符的数值是它在字母表的位置（从 1 开始），
//      即 'a' 的数值是 1 , 'b' 的数值是 2 ，以此类推。


// 数据限制：
//  1 <= n <= 10 ^ 5
//  n <= k <= 26 * n


// 输入： n = 3, k = 27
// 输出： "aay"
// 解释： 字符串的数值为 1 + 1 + 25 = 27 ，
//       它是数值满足要求且长度等于 3 字典序最小的字符串。


// 输入： n = 5, k = 73
// 输出： "aaszz"
// 解释： 字符串的数值为 1 + 1 + 19 + 26 + 26 = 73 ，
//       它是数值满足要求且长度等于 5 字典序最小的字符串。


// 思路： 贪心
//
//      我们可以从右往左贪心地在第 i 个位置填充能放的最大字符即可。
//
//      这个字符可以由以下两种情况得出：
//          1. 由于前面还有 i 个位置需要填充，
//              所以当前位字符的数值 digit 最大只能取到 k - i
//          2. 由于一个字符最大的数值是 26 ，
//              所以当前位字符的数值 digit 最大只能取到 26
//
//      综上，当前位字符的数值 digit = min(k - i, 26)
//
//      那么对应的字符就是 'a' + digit - 1
//
//      
//      时间复杂度：O(n)
//          1. 需要计算 ans 中全部 O(n) 个位置的字符
//      空间复杂度：O(n)
//          1. 需要维护长度为 O(n) 的字符列表 ans
//          2. 需要返回长度为 O(n) 的结果字符串


func getSmallestString(n int, k int) string {
    // 初始化结果列表，长度为 n ，默认都是 '\0'
    ans := make([]byte, n);
    // 从最后一个字符开始遍历
    for i := n - 1; i >= 0; i-- {
        // 1. 由于前面还有 i 个位置需要填充，
        //    所以当前位 digit 最大只能取到 k - i
        // 2. 同时由于一个字符最大的数值是 26 ，
        //    所以当前位 digit 最大只能取到 26
        // 综上，当前位取 min(k - i, 26)
        digit := k - i
        if digit > 26 {
            digit = 26
        }
        // 从 k 分走 digit ，表示已使用
        k -= digit
        // 那么结果字符串中第 i 位的字符就是 digit + 'a' - 1
        ans[i] = byte('a' + digit - 1)
    }

    // 最后将所有的字符收集成一个字符串并返回
    return string(ans)
}
