// 链接：https://leetcode.com/problems/valid-sudoku/
// 题意：判断一个数独的初始状态是否合法，合法状态如下：
//      1. 每一行出现且仅出现 1-9 的每一个数
//      2. 每一列出现且仅出现 1-9 的每一个数
//      3. 每一个九宫格出现且仅出现 1-9 的每一个数

// 输入：
// [
//  ["5","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
// 输出：true

// 输入：
// [
//  ["8","3",".",".","7",".",".",".","."],
//  ["6",".",".","1","9","5",".",".","."],
//  [".","9","8",".",".",".",".","6","."],
//  ["8",".",".",".","6",".",".",".","3"],
//  ["4",".",".","8",".","3",".",".","1"],
//  ["7",".",".",".","2",".",".",".","6"],
//  [".","6",".",".",".",".","2","8","."],
//  [".",".",".","4","1","9",".",".","5"],
//  [".",".",".",".","8",".",".","7","9"]
//]
// 输出：false

// 思路：模拟即可，判断出现的数字是否有重复的
//      时间复杂度：O(n)

func isValidSudoku(board [][]byte) bool {
    for i := 0; i < 9; i++ {
        if !isValidRow(board, i) || !isValidColumn(board, i) { // 行和列任意一个不合法，则不合法
            return false
        }
        r, c := (i / 3) * 3, (i % 3) * 3 // 生成九宫格起点
        if !isValidSquare(board, r, c) {  // 任意一个九宫格不合法，则不合法
            return false
        }
    }
    return true // 所有校验都通过，则合法
}

func isValidRow(board [][]byte, i int) bool {
    exists := [127]bool{}
    for j := 0; j < 9; j++ {
        if board[i][j] == '.' { // 如果是空，则继续
            continue
        }
        if exists[board[i][j]] { // 如果当前数字已出现，则当前行不合法
            return false
        }
        exists[board[i][j]] = true // 标记当前数字已出现
    }
    return true // 所有数字否不重复，则当前行合法
}

func isValidColumn(board [][]byte, j int) bool {
    exists := [127]bool{}
    for i := 0; i < 9; i++ {
        if board[i][j] == '.' { // 如果是空，则继续
            continue
        }
        if exists[board[i][j]] { // 如果当前数字已出现，则当前列不合法
            return false
        }
        exists[board[i][j]] = true // 标记当前数字已出现
    }
    return true // 所有数字否不重复，则当前列合法
}

func isValidSquare(board [][]byte, r, c int) bool {
    exists := [127]bool{}
    for i := r + 2; i >= r; i-- {
        for j := c + 2; j >= c; j-- {
            if board[i][j] == '.' { // 如果是空，则继续
                continue
            }
            if exists[board[i][j]] { // 如果当前数字已出现，则当前列不合法
                return false
            }
            exists[board[i][j]] = true // 标记当前数字已出现
        }
    }
    return true // 所有数字否不重复，则当前列合法
}