# 链接：https://leetcode.com/problems/power-of-four/
# 题意：给定一个数 n ，判断其是否是 4 的幂次方？
#
#      进阶：不使用循环或者递归进行判断。


# 数据限制：
#  -(2 ^ 31) <= n <= 2 ^ 31 - 1


# 输入： n = 16
# 输出： true
# 解释： 16 = 4 ^ 4

# 输入： n = 5
# 输出： false
# 解释： 4 ^ 1 < n < 4 ^ 2

# 输入： n = 1
# 输出： true
# 解释： 1 = 4 ^ 0


# 思路： 位运算
#
#      4 的幂次方必定满足以下条件：二进制位有且仅有 1 位为 1 ，且该二进制位是奇数位。
#
#      我们可以通过位运算来判断 n 是否满足上述两个条件：
#          1. (n & (n - 1)) == 0: 判断 n 是否为 0 或 2 的幂次方，
#              即保证所有二进制位最多只有 1 个 1
#          2. (n & 0x55555555) != 0: 判断 n 的二进制位是否存在奇数位位 1
#
#      当前仅当上述两个条件都满足时， n 是 4 的幂次方
#
#      
#      时间复杂度：O(1)
#          1. 只需要常数次位运算和布尔运算即可
#      空间复杂度：O(1)
#          1. 只需要使用常数个额外变量即可


class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        # 4 的幂次方必定满足以下条件：二进制位有且仅有 1 位为 1 ，且该二进制位是奇数位。
        # 我们可以通过位运算来判断 n 是否满足上述两个条件：
        #  1. (n & (n - 1)) == 0: 判断 n 是否为 0 或 2 的幂次方，
        #      即保证所有二进制位最多只有 1 个 1
        #  2. (n & 0x55555555) != 0: 判断 n 的二进制位是否存在奇数位位 1
        #
        # 当前仅当上述两个条件都满足时， n 是 4 的幂次方
        return (n & (n - 1)) == 0 and n & 0x55555555 != 0
