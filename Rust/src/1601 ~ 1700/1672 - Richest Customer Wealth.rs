// 链接：https://leetcode.com/problems/richest-customer-wealth/
// 题意：给定一个 m * n 的二维数组 accounts ，
//      accounts[i][j] 表示第 i 个客户在银行 j 中的存款数，
//      求最富有的人的存款总数？

// 数据限制：
//  m == accounts.length
//  n == accounts[i].length
//  1 <= m, n <= 50
//  1 <= accounts[i][j] <= 100

// 输入：accounts = [[1,2,3],[3,2,1]]
// 输出：6
// 解释：第 1 个客户的存款数 = 1 + 2 + 3 = 6
//      第 2 个客户的存款数 = 3 + 2 + 1 = 6
//
//      这两个客户都是最富有的人，存款总数都是 6

// 输入：accounts = [[1,5],[7,3],[3,5]]
// 输出：10
// 解释：第 1 个客户的存款数 = 1 + 5 = 6
//      第 2 个客户的存款数 = 7 + 3 = 10
//      第 3 个客户的存款数 = 3 + 5 = 8
//
//      第 2 个客户是最富有的人，存款总数是 10

// 输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]
// 输出：17
// 解释：第 1 个客户的存款数 = 2 + 8 + 7 = 17
//      第 2 个客户的存款数 = 7 + 1 + 3 = 11
//      第 3 个客户的存款数 = 1 + 9 + 5 = 15
//
//      第 1 个客户是最富有的人，存款总数是 17


// 思路：模拟
//
//      维护一个 ans 表示存款总数的最大值，初始为 0 。
//		然后按照题意遍历计算第 i 个客户的存款总数： wealth = sum(accounts[i]) ，
//      再更新存款总数的最大值即可： ans = max(ans, wealth) 。
//
//      时间复杂度：O(m * n)
//      空间复杂度：O(1)

impl Solution {
    pub fn maximum_wealth(accounts: Vec<Vec<i32>>) -> i32 {
        accounts
            // 遍历每个账户
            .iter()
            // 计算每个客户的存款总数
            .map(|account| account.iter().sum())
            // 计算所有客户的存款总数的最大值
            .max()
            // 获取并返回这个最大值
            .unwrap()
    }
}
